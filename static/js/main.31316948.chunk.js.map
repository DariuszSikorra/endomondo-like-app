{"version":3,"sources":["reducer/reducer.tsx","context/context.tsx","components/menu/Menu.tsx","components/menu/setInterval.tsx","components/map/MapWrapper.jsx","components/map/MapContainer.tsx","serviceWorker.js","index.tsx","App.tsx"],"names":["reducer","state","action","type","currentPosition","payload","newMappedPositions","mappedPositions","concat","countingStarted","runningTime","distance","AppStateContext","React","createContext","undefined","AppDispatchContext","useAppState","context","useContext","Error","Menu","AppState","dispatch","useAppDispatch","startTime","Date","now","callback","delay","active","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","transformedPosition","lat","latitude","lng","longitude","length","positionOne","positionTwo","distanceCounter","watchId","navigator","geolocation","watchPosition","pos","crd","coords","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","log","clearWatch","timerValue","Math","floor","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","sin","cos","c","atan2","sqrt","deg","PI","className","style","textAlign","background","Container","maxWidth","Typography","variant","component","accuracy","speed","color","ButtonGroup","Button","onClick","MapWrapper","google","window","width","height","zoom","initialCenter","title","name","position","path","strokeColor","strokeOpacity","strokeWeight","GoogleApiWrapper","apiKey","Boolean","location","hostname","match","ReactDOM","render","children","useReducer","Provider","value","useState","bottom","setState","toggleDrawer","side","open","event","key","Drawer","anchor","onClose","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31316948.chunk.js","sourcesContent":["import { AppState } from \"../context/context\";\r\n\r\ntype Action =\r\n  | { type: \"CURRENT_POSITION\"; payload: any }\r\n  | { type: \"MAP_POSITIONS\"; payload: any }\r\n  | { type: \"COUNTING_STARTED\"; payload: any }\r\n  | { type: \"COUNT\"; payload: number }\r\n  | { type: \"MAP_DISTANCE\"; payload: number }\r\n  | { type: \"RESET\" };\r\n\r\nexport type Dispatch = (action: Action) => void;\r\n\r\nexport const reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case \"CURRENT_POSITION\":\r\n      return { ...state, currentPosition: action.payload };\r\n    case \"MAP_POSITIONS\":\r\n      const newMappedPositions = state.mappedPositions.concat(action.payload);\r\n      return { ...state, mappedPositions: newMappedPositions };\r\n    case \"COUNTING_STARTED\":\r\n      return { ...state, countingStarted: action.payload };\r\n    case \"COUNT\":\r\n      return { ...state, runningTime: action.payload };\r\n    case \"MAP_DISTANCE\":\r\n      return { ...state, distance: state.distance + action.payload };\r\n    case \"RESET\":\r\n      return {\r\n        ...state,\r\n        countingStarted: false,\r\n        runningTime: 0,\r\n        mappedPositions: [],\r\n        distance: 0\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { reducer } from \"../reducer/reducer\";\r\nimport { Dispatch} from \"../reducer/reducer\";\r\n\r\n\r\nexport type AppProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport type AppState = {\r\n  currentPosition: Coords;\r\n  countingStarted: boolean;\r\n  runningTime: number;\r\n  mappedPositions: Array<Coords>;\r\n  distance: number;\r\n};\r\nexport type Coords = {\r\n  accuracy: number;\r\n  latitude: number;\r\n  longitude: number;\r\n  speed: number;\r\n};\r\n\r\nconst AppStateContext = React.createContext<AppState | undefined>(undefined);\r\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\r\n\r\nconst AppProvider: React.SFC<AppProviderProps> = ({\r\n  children\r\n}: AppProviderProps) => {\r\n  const [AppState, dispatch] = React.useReducer(reducer, {\r\n    currentPosition: {},\r\n    countingStarted: false,\r\n    runningTime: 0,\r\n    mappedPositions: [],\r\n    distance: 0,\r\n  });\r\n  return (\r\n    <AppStateContext.Provider value={AppState}>\r\n      <AppDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </AppDispatchContext.Provider>\r\n    </AppStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAppState = () => {\r\n  const context = React.useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useAppDispatch = () => {\r\n  const context = React.useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useDispatchState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { AppProvider, useAppState, useAppDispatch };\r\n","import React, { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppState } from \"../../context/context\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { useInterval } from \"./setInterval\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Typography, ButtonGroup } from \"@material-ui/core\";\r\n\r\n\r\nexport interface MenuProps {}\r\nconst Menu: React.SFC<MenuProps> = () => {\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const startTime = Date.now() - AppState.runningTime;\r\n\r\n  const onLocationRead = () => {\r\n    dispatch({ type: \"COUNT\", payload: Date.now() - startTime });\r\n    const transformedPosition = {\r\n      lat: AppState.currentPosition.latitude,\r\n      lng: AppState.currentPosition.longitude\r\n    };\r\n    dispatch({ type: \"MAP_POSITIONS\", payload: transformedPosition });\r\n    if (AppState.mappedPositions.length > 1) {\r\n      const positionOne =\r\n        AppState.mappedPositions[AppState.mappedPositions.length - 2];\r\n      const positionTwo =\r\n        AppState.mappedPositions[AppState.mappedPositions.length - 1];\r\n      return distanceCounter(positionOne, positionTwo);\r\n    } else {\r\n      const positionOne = { lat: 0, lng: 0 };\r\n      const positionTwo = { lat: 0, lng: 0 };\r\n      return distanceCounter(positionOne, positionTwo);\r\n    }\r\n  };\r\n  useInterval(onLocationRead, 1000, AppState.countingStarted);\r\n\r\n  //Watching for changing position.\r\n  useEffect(() => {\r\n    let watchId = 0;\r\n    if (navigator.geolocation) {\r\n      const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 2000,\r\n        maximumAge: 1000\r\n      };\r\n      const success = (pos: any) => {\r\n        const crd = pos.coords;\r\n        dispatch({ type: \"CURRENT_POSITION\", payload: crd });\r\n      };\r\n      const error = (err: any) => {\r\n        console.warn(`ERROR(${err.code}): ${err.message}`);\r\n      };\r\n      watchId = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\r\n        \"Something get wrong, geolocation is disabled, or your browser is not supporting it\"\r\n      );\r\n    }\r\n    return () => navigator.geolocation.clearWatch(watchId);\r\n  }, [dispatch]);\r\n\r\n  const handleToggle = () => {\r\n    dispatch({ type: \"COUNTING_STARTED\", payload: !AppState.countingStarted });\r\n  };\r\n\r\n  const timerValue = (\r\n    <div>\r\n      <span>{Math.floor((AppState.runningTime / 1000 / 60) << 0)}</span>:\r\n      <span>\r\n        {Math.floor((AppState.runningTime / 1000) % 60) < 10 && 0}\r\n        {Math.floor((AppState.runningTime / 1000) % 60)}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  const distanceCounter = (positionOne: any, positionTwo: any) => {\r\n    const lat1 = positionOne.lat;\r\n    const lon1 = positionOne.lng;\r\n    const lat2 = positionTwo.lat;\r\n    const lon2 = positionTwo.lng;\r\n    let R = 6371; // Radius of the earth in km\r\n    let dLat = deg2rad(lat2 - lat1); // deg2rad below\r\n    let dLon = deg2rad(lon2 - lon1);\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(deg2rad(lat1)) *\r\n        Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c; // Distance in km\r\n\r\n    function deg2rad(deg: number) {\r\n      return deg * (Math.PI / 180);\r\n    }\r\n\r\n    return dispatch({ type: \"MAP_DISTANCE\", payload: d });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"mapContainer\"\r\n      style={{ textAlign: \"center\", background: \"lightgray\" }}\r\n    >\r\n      <Container maxWidth=\"sm\">\r\n        <Typography variant=\"h6\" component=\"h4\">\r\n          Your coordinates provided by geolocation:\r\n          <ul>\r\n            <li>Latitude: {AppState.currentPosition.latitude}</li>\r\n            <li>Longitude: {AppState.currentPosition.longitude}</li>\r\n            <li>Accuracy: ~{Math.floor(AppState.currentPosition.accuracy)}m</li>\r\n            <li>\r\n              Current speed:{\" \"}\r\n              {AppState.currentPosition.speed\r\n                ? Math.floor(AppState.currentPosition.speed * 1000 / 60)+\"km/h\"\r\n                : \"-\"}\r\n            </li>\r\n            <li>Current distance: {Math.floor(AppState.distance * 1000)}m</li>\r\n          </ul>{\" \"}\r\n        </Typography>\r\n        <Typography color=\"primary\" variant=\"h5\" component=\"h3\">\r\n          {timerValue}\r\n        </Typography>\r\n        <ButtonGroup color=\"primary\" variant=\"contained\">\r\n          <Button onClick={handleToggle}>\r\n            {AppState.countingStarted ? \"Stop\" : \"Start\"}\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={() => dispatch({ type: \"RESET\" })}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(\r\n  callback: () => void,\r\n  delay: number,\r\n  active: boolean\r\n) {\r\n  const savedCallback = useRef(() => {});\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    if (active) {\r\n      const tick = () => {\r\n        savedCallback.current();\r\n      };\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }\r\n  }, [delay, active]);\r\n}\r\n","import React from \"react\";\r\nimport { Map, Polyline, Marker } from \"google-maps-react\";\r\n\r\nimport { useAppState } from \"../../context/context\";\r\n\r\nexport const MapWrapper = () => {\r\n  const AppState = useAppState();\r\n\r\n  return (\r\n    <div className=\"mapWrapper\">\r\n      <Map\r\n        google={window.google}\r\n        style={{ width: \"100%\", height: \"95%\" }}\r\n        className={\"map\"}\r\n        zoom={14}\r\n        initialCenter={{\r\n          lat: AppState.currentPosition.latitude,\r\n          lng: AppState.currentPosition.longitude\r\n        }}\r\n      >\r\n        <Marker\r\n          title={\"The marker`s title will appear as a tooltip.\"}\r\n          name={\"SOMA\"}\r\n          position={{\r\n            lat: AppState.currentPosition.latitude,\r\n            lng: AppState.currentPosition.longitude\r\n          }}\r\n        />\r\n        <Polyline\r\n          path={AppState.mappedPositions}\r\n          strokeColor=\"#0000FF\"\r\n          strokeOpacity={0.8}\r\n          strokeWeight={3}\r\n        />\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapWrapper;\r\n","import React from \"react\";\r\nimport { GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nimport MapWrapper from \"./MapWrapper\"\r\n\r\n\r\nconst MapContainer = () => {\r\n  return (\r\n    <div className=\"mapContainer\">\r\n      <MapWrapper />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyAGnzKbqsq9u1BjIswxPr6p5SveDtx7H20\"\r\n}) (MapContainer);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProvider } from \"./context/context\";\n\nReactDOM.render(\n  <AppProvider>\n    <App />{\" \"}\n  </AppProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport Menu from \"./components/menu/Menu\";\n\nimport MapContainer from \"./components/map/MapContainer\";\nimport { Drawer, Button, Container } from \"@material-ui/core\";\n\nexport default function App() {\n  // const classes = useStyles();\n  const [state, setState] = React.useState({\n    bottom: true\n  });\n\n  const toggleDrawer = (side: any, open: any) => (event: any) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n    setState({ ...state, [side]: open });\n  };\n\n  return (\n    <>\n      <Container style={{ textAlign: \"center\", background: \"gray\" }}>\n        <Button\n          onClick={toggleDrawer(\"bottom\", true)}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          OPEN TAB\n        </Button>\n      </Container>\n      <Drawer\n        anchor=\"bottom\"\n        open={state.bottom}\n        onClose={toggleDrawer(\"bottom\", false)}\n      >\n        <Menu />\n      </Drawer>\n      <MapContainer />\n    </>\n  );\n}\n"],"sourceRoot":""}