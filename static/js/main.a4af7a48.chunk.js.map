{"version":3,"sources":["reducer/reducer.tsx","context/context.tsx","components/menu/Menu.tsx","components/map/MapWrapper.jsx","components/map/MapContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","currentPosition","payload","newMappedPositions","mappedPositions","concat","countingStarted","runningTime","AppStateContext","React","createContext","undefined","AppDispatchContext","useAppState","context","useContext","Error","Menu","AppState","dispatch","useAppDispatch","useEffect","navigator","geolocation","watchPosition","pos","crd","coords","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","log","timerIdRef","useRef","timerValue","Math","floor","className","latitude","longitude","accuracy","onClick","clearInterval","current","startTime","Date","now","setInterval","transformedPosition","lat","lng","GoogleApiWrapper","apiKey","process","google","window","style","width","height","zoom","initialCenter","title","name","position","path","strokeColor","strokeOpacity","strokeWeight","MapContainer","props","App","Boolean","location","hostname","match","ReactDOM","render","children","useReducer","Provider","value","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4af7a48.chunk.js","sourcesContent":["import { AppState } from \"../context/context\";\r\n\r\ntype Action =\r\n  | { type: \"CURRENT_POSITION\"; payload: any }\r\n  | { type: \"MAP_POSITIONS\"; payload: any }\r\n  | { type: \"COUNTING_STARTED\"; payload: any }\r\n  | { type: \"COUNT\"; payload: number}\r\n\r\n  \r\nexport type Dispatch = (action: Action) => void;\r\n\r\n\r\nexport const reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case \"CURRENT_POSITION\":\r\n      return { ...state, currentPosition: action.payload };\r\n    case \"MAP_POSITIONS\":\r\n      const newMappedPositions = state.mappedPositions.concat(action.payload)\r\n    return { ...state, mappedPositions: newMappedPositions };\r\n    case \"COUNTING_STARTED\":\r\n      return { ...state, countingStarted: action.payload };\r\n    case \"COUNT\":\r\n      return { ...state, runningTime: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { reducer } from \"../reducer/reducer\";\r\nimport { Dispatch} from \"../reducer/reducer\";\r\n\r\n\r\nexport type AppProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport type AppState = {\r\n  currentPosition: Coords;\r\n  countingStarted: boolean;\r\n  runningTime: number;\r\n  mappedPositions: Array<Coords>\r\n};\r\nexport type Coords = {\r\n  accuracy: number;\r\n  latitude: number;\r\n  longitude: number;\r\n  speed: number;\r\n};\r\n\r\nconst AppStateContext = React.createContext<AppState | undefined>(undefined);\r\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\r\n\r\nconst AppProvider: React.SFC<AppProviderProps> = ({\r\n  children\r\n}: AppProviderProps) => {\r\n  const [AppState, dispatch] = React.useReducer(reducer, {\r\n    currentPosition: {},\r\n    countingStarted: false,\r\n    runningTime: 0,\r\n    mappedPositions: []\r\n  });\r\n  return (\r\n    <AppStateContext.Provider value={AppState}>\r\n      <AppDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </AppDispatchContext.Provider>\r\n    </AppStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAppState = () => {\r\n  const context = React.useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useAppDispatch = () => {\r\n  const context = React.useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useDispatchState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { AppProvider, useAppState, useAppDispatch };\r\n","import React, { useEffect, useRef, RefAttributes } from \"react\";\r\nimport { useAppDispatch, useAppState } from \"../../context/context\";\r\n\r\nexport interface MenuProps {}\r\nconst Menu: React.SFC<MenuProps> = () => {\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  //Watching for changing position.\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 2000,\r\n        maximumAge: 1000\r\n      };\r\n      const success = (pos: any) => {\r\n        const crd = pos.coords;\r\n        dispatch({ type: \"CURRENT_POSITION\", payload: crd });\r\n      };\r\n      const error = (err: any) => {\r\n        console.warn(`ERROR(${err.code}): ${err.message}`);\r\n      };\r\n      navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\r\n        \"Something get wrong, geolocation is disabled, or your browser is not supporting it\"\r\n      );\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const timerIdRef: any = useRef(null);\r\n\r\n  const handleToggle = () => {\r\n    clearInterval(timerIdRef.current);\r\n\r\n    if (AppState.countingStarted) {\r\n      dispatch({ type: \"COUNTING_STARTED\", payload: false });\r\n    } else {\r\n      const startTime = Date.now() - AppState.runningTime;\r\n      timerIdRef.current = setInterval(() => {\r\n        dispatch({ type: \"COUNT\", payload: Date.now() - startTime })\r\n        const transformedPosition = { lat: AppState.currentPosition.latitude, lng: AppState.currentPosition.longitude }\r\n        dispatch({ type: \"MAP_POSITIONS\", payload: transformedPosition })\r\n      }, 1000);\r\n      dispatch({ type: \"COUNTING_STARTED\", payload: true });\r\n    }\r\n  };\r\n\r\n  const timerValue = (\r\n    <div>\r\n      <span>{Math.floor((AppState.runningTime / 1000 / 60) << 0)}</span>:\r\n      <span>\r\n        {Math.floor((AppState.runningTime / 1000) % 60) < 10 && 0}\r\n        {Math.floor((AppState.runningTime / 1000) % 60)}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"mapContainer\">\r\n      <h1>Menu</h1>\r\n      Coords:\r\n      <ul>\r\n        <li>Latitude: {AppState.currentPosition.latitude}</li>\r\n        <li>Longitude: {AppState.currentPosition.longitude}</li>\r\n        <li>Accuracy: {AppState.currentPosition.accuracy}</li>\r\n      </ul>{\" \"}\r\n      <button onClick={handleToggle}>\r\n        {AppState.countingStarted ? \"Stop\" : \"Start\"}\r\n      </button>\r\n      {timerValue}\r\n      <button onClick={() =>console.log(AppState.mappedPositions)} >Wy≈õwietl positions array</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import * as React from \"react\";\r\nimport { Map, Polyline, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nimport { useAppState } from \"../../context/context\";\r\n\r\n\r\nexport const MapWrapper = () => {\r\n  const AppState = useAppState();\r\n\r\n  // const myPolyline = [\r\n  //   { lat: 54.6082249, lng: 18.2469871 },\r\n  //   { lat: 54.600505, lng: 18.257425 },\r\n  //   { lat: 54.602127,  lng: 18.245686 },\r\n  //   { lat: 54.6082249, lng: 18.2469871 },\r\n  // ];\r\n  return (\r\n    <div className=\"mapWrapper\">\r\n      <Map\r\n        google={window.google}\r\n        style={{ width: \"40vw\", height: \"70vh\" }}\r\n        className={\"map\"}\r\n        zoom={14}\r\n        initialCenter={{\r\n          lat: AppState.currentPosition.latitude,\r\n          lng: AppState.currentPosition.longitude\r\n        }}\r\n      >\r\n        <Marker\r\n          title={\"The marker`s title will appear as a tooltip.\"}\r\n          name={\"SOMA\"}\r\n          position={{ lat: AppState.currentPosition.latitude, lng: AppState.currentPosition.longitude }}\r\n        />\r\n        <Polyline\r\n          // path={myPolyline}\r\n          path={AppState.mappedPositions}\r\n          strokeColor=\"#0000FF\"\r\n          strokeOpacity={0.8}\r\n          strokeWeight={2} />\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: process.env.REACT_APP_GOOGLE_API_KEY\r\n})(MapWrapper);\r\n","import React from \"react\";\r\n\r\nimport MapWrapper from \"./MapWrapper\"\r\n\r\nexport type MapContainerProps = {};\r\n\r\nconst MapContainer: React.SFC<MapContainerProps> = props => {\r\n  \r\n\r\n  return (\r\n    <div className=\"mapContainer\">\r\n      <h1>Jestem mapƒÖ</h1>\r\n      <MapWrapper />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n","import React from \"react\";\n\nimport Menu from \"./components/menu/Menu\";\nimport MapContainer from \"./components/map/MapContainer\";\n\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MapContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {AppProvider} from \"./context/context\"\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}