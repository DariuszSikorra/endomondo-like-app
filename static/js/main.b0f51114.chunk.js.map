{"version":3,"sources":["reducer/reducer.tsx","context/context.tsx","components/menu/useLocationReadInterval.tsx","components/menu/setInterval.tsx","components/menu/Menu.tsx","components/map/LoadingContainer.tsx","components/map/MapContainer.tsx","localStorage/localStorage.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["reducer","state","action","type","payload","currentPosition","userPermission","zoom","lat","lng","newMappedPositions","mappedPositions","concat","countingStarted","runningTime","distance","openTab","theme","createMuiTheme","palette","primary","main","AppStateContext","React","createContext","undefined","AppDispatchContext","useAppState","context","useContext","Error","useAppDispatch","useLocationReadInterval","AppState","dispatch","startTime","Date","now","callback","delay","active","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","transformedPosition","latitude","longitude","length","positionOne","positionTwo","distanceCounter","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","deg","PI","useStyles","makeStyles","verticalPadding","padding","spacing","Menu","classes","watchId","navigator","geolocation","watchPosition","pos","crd","coords","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","log","clearWatch","timerValue","floor","Drawer","anchor","open","onClose","Grid","container","justify","className","item","direction","Box","textAlign","Typography","variant","component","accuracy","speed","color","align","ButtonGroup","Button","onClick","LoadingContainer","AnyMap","Map","fullScreen","position","height","GoogleApiWrapper","apiKey","google","window","initialCenter","title","path","strokeColor","strokeOpacity","strokeWeight","useStateInLocalStorage","name","initializeFn","didRun","raw","localStorage","getItem","loadedState","JSON","parse","setItem","stringify","root","flexGrow","menuButton","marginRight","App","AppBar","Toolbar","IconButton","edge","aria-label","Tooltip","Link","href","Boolean","location","hostname","match","ReactDOM","render","children","useReducer","ThemeProvider","Provider","value","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"ozBAeO,IAAMA,EAAU,SAACC,EAAiBC,GACvC,OAAQA,EAAOC,MACb,IAAK,QACH,OAAOD,EAAOE,QAChB,IAAK,mBACH,OAAO,EAAP,GACKH,EADL,CAEEI,gBAAiBH,EAAOE,QACxBE,gBAAgB,EAChBC,KAAM,KAEV,IAAK,cACH,OAAO,EAAP,GACKN,EADL,CAEEI,gBAAiB,CAAEG,IAAK,UAAWC,IAAK,WACxCH,gBAAgB,IAEpB,IAAK,gBACH,IAAMI,EAAqBT,EAAMU,gBAAgBC,OAAOV,EAAOE,SAC/D,OAAO,EAAP,GAAYH,EAAZ,CAAmBU,gBAAiBD,IACtC,IAAK,mBACH,OAAO,EAAP,GAAYT,EAAZ,CAAmBY,gBAAiBX,EAAOE,UAC7C,IAAK,QACH,OAAO,EAAP,GAAYH,EAAZ,CAAmBa,YAAaZ,EAAOE,UACzC,IAAK,eACH,OAAO,EAAP,GAAYH,EAAZ,CAAmBc,SAAUd,EAAMc,SAAWb,EAAOE,UACvD,IAAK,eACH,OAAO,EAAP,GACKH,EADL,CAEEY,iBAAiB,EACjBC,YAAa,EACbH,gBAAiB,GACjBI,SAAU,IAEd,IAAK,aACH,OAAO,EAAP,GACKd,EADL,CAEEe,QAASd,EAAOE,UAEpB,QACE,OAAOH,I,iBC5BPgB,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKNC,EAAkBC,IAAMC,mBAAoCC,GAC5DC,EAAqBH,IAAMC,mBAAoCC,GA0B/DE,EAAc,WAClB,IAAMC,EAAUL,IAAMM,WAAWP,GACjC,QAAgBG,IAAZG,EACF,MAAM,IAAIE,MAAM,+CAElB,OAAOF,GAGHG,EAAiB,WACrB,IAAMH,EAAUL,IAAMM,WAAWH,GACjC,QAAgBD,IAAZG,EACF,MAAM,IAAIE,MAAM,oDAElB,OAAOF,G,iHCxEF,SAASI,IACZ,IAAMC,EAAWN,IACXO,EAAWH,IAEXI,EAAYC,KAAKC,MAAQJ,EAASnB,aCLrC,SACLwB,EACAC,EACAC,GAEA,IAAMC,EAAgBC,kBAAO,eAG7BC,qBAAU,WACRF,EAAcG,QAAUN,IACvB,CAACA,IAGJK,qBAAU,WACR,GAAIH,EAAQ,CAIV,GAAc,OAAVD,EAAgB,CAClB,IAAIM,EAAKC,aAJE,WACXL,EAAcG,YAGaL,GAC3B,OAAO,kBAAMQ,cAAcF,QAG9B,CAACN,EAAOC,IDMTQ,EAvBuB,WAEnBd,EAAS,CAAE/B,KAAM,QAASC,QAASgC,KAAKC,MAAQF,IAEhD,IAAMc,EAAsB,CACxBzC,IAAKyB,EAAS5B,gBAAgB6C,SAC9BzC,IAAKwB,EAAS5B,gBAAgB8C,WAIlC,GAFAjB,EAAS,CAAE/B,KAAM,gBAAiBC,QAAS6C,IAEvChB,EAAStB,gBAAgByC,OAAS,EAAG,CACrC,IAAMC,EACFpB,EAAStB,gBAAgBsB,EAAStB,gBAAgByC,OAAS,GACzDE,EACFrB,EAAStB,gBAAgBsB,EAAStB,gBAAgByC,OAAS,GAC/D,OAAOG,EAAgBF,EAAaC,GAIpC,OAAOC,EAFa,CAAE/C,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,MAKf,IAAMwB,EAASpB,iBAG3C,IAAM0C,EAAkB,SAACF,EAAkBC,GACvC,IAAME,EAAOH,EAAY7C,IACnBiD,EAAOJ,EAAY5C,IACnBiD,EAAOJ,EAAY9C,IACnBmD,EAAOL,EAAY7C,IAErBmD,EAAOC,EAAQH,EAAOF,GACtBM,EAAOD,EAAQF,EAAOF,GACtBM,EACAC,KAAKC,IAAIL,EAAO,GAAKI,KAAKC,IAAIL,EAAO,GACrCI,KAAKE,IAAIL,EAAQL,IACjBQ,KAAKE,IAAIL,EAAQH,IACjBM,KAAKC,IAAIH,EAAO,GAChBE,KAAKC,IAAIH,EAAO,GAChBK,EAAI,EAAIH,KAAKI,MAAMJ,KAAKK,KAAKN,GAAIC,KAAKK,KAAK,EAAIN,IAGnD,SAASF,EAAQS,GACb,OAAOA,GAAON,KAAKO,GAAK,KAG5B,OAAOrC,EAAS,CAAE/B,KAAM,eAAgBC,QAhBhC,KAUI+D,KE/BpB,IAAMK,EAAYC,aAAW,SAAAxD,GAAK,MAAK,CACrCyD,gBAAiB,CACfC,QAAS1D,EAAM2D,QAAQ,EAAG,QAyHfC,EArHQ,WACrB,IAAMC,EAAUN,IACVvC,EAAWN,IACXO,EAAWH,IACjBC,IAEAW,qBAAU,WACR,IAAIoC,EAAU,EACd,GAAIC,UAAUC,YAAa,CAczBF,EAAUC,UAAUC,YAAYC,eARhB,SAACC,GACf,IAAMC,EAAMD,EAAIE,OAChBnD,EAAS,CAAE/B,KAAM,mBAAoBC,QAASgF,OAElC,SAACE,GACbC,QAAQC,KAAR,gBAAsBF,EAAIG,KAA1B,cAAoCH,EAAII,UACxCxD,EAAS,CAAE/B,KAAM,kBAXH,CACdwF,oBAAoB,EACpBC,QAAS,IACTC,WAAY,WAYdN,QAAQO,IACN,sFAGJ,OAAO,kBAAMd,UAAUC,YAAYc,WAAWhB,MAC7C,CAAC7C,IAGJ,IAAM8D,EACJ,6BACE,8BAAOhC,KAAKiC,MAAOhE,EAASnB,YAAc,IAAO,IAAO,IAD1D,IAEE,8BACGkD,KAAKiC,MAAOhE,EAASnB,YAAc,IAAQ,IAAM,IAAM,EACvDkD,KAAKiC,MAAOhE,EAASnB,YAAc,IAAQ,MAKlD,OACE,kBAACoF,EAAA,EAAD,CACEC,OAAO,SACPC,KAAMnE,EAASjB,QACfqF,QAAS,kBACPnE,EAAS,CAAE/B,KAAM,aAAcC,SAAU6B,EAASjB,YAGpD,kBAACsF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,UAAW3B,EAAQJ,iBAClD,kBAAC4B,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,UAAU,UACxB,kBAACC,EAAA,EAAD,CAAKC,UAAU,UACb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKP,UAAU,eAC/CxE,EAAS3B,eACN,4CACA,2GAGR,kBAACgG,EAAA,EAAD,CAAMI,MAAI,GAAV,cACc1C,KAAKiC,MAAMhE,EAAS5B,gBAAgB4G,UADlD,KAGA,kBAACX,EAAA,EAAD,CAAMI,MAAI,GAAV,iBAEGzE,EAAS5B,gBAAgB6G,MACtBlD,KAAKiC,MAAwC,IAAjChE,EAAS5B,gBAAgB6G,MAAgB,IACrD,OACA,KAEN,kBAACZ,EAAA,EAAD,CAAMI,MAAI,GAAV,qBACqB1C,KAAKiC,MAA0B,IAApBhE,EAASlB,UADzC,KAGA,kBAACuF,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACI,EAAA,EAAD,CACEK,MAAM,UACNJ,QAAQ,KACRC,UAAU,KACVI,MAAM,UAELpB,IAGL,kBAACM,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACF,QAAQ,UAC3B,kBAACa,EAAA,EAAD,CAAaF,MAAM,UAAUJ,QAAQ,aACnC,kBAACO,EAAA,EAAD,CACEC,QAAS,WACPrF,EAAS,CACP/B,KAAM,mBACNC,SAAU6B,EAASpB,oBAItBoB,EAASpB,gBACR,kBAAC,IAAD,MAEA,kBAAC,IAAD,SAIJoB,EAASpB,iBACT,kBAACyG,EAAA,EAAD,CACEH,MAAM,UACNJ,QAAQ,YACRQ,QAAS,kBAAMrF,EAAS,CAAE/B,KAAM,mBAEhC,kBAAC,IAAD,a,gBC3HHqH,EAJU,WACrB,OAAS,gDCGPC,EAASC,MAGTlD,EAAYC,aAAW,SAAAxD,GAAK,MAAK,CACrC0G,WAAY,CACVC,SAAU,WACVC,OAAQ,0BAqCGC,6BAAiB,CAC9BC,OAAQ,0CACRP,iBAAkBA,GAFLM,EAjCM,WACnB,IAAMhD,EAAUN,IACVvC,EAAWN,IAEjB,OACE,yBAAK8E,UAAW3B,EAAQ6C,YACtB,kBAACF,EAAD,CAEEO,OAAQC,OAAOD,OACfzH,KAAM,GACN2H,cAAe,CACb1H,IAAKyB,EAAS5B,gBAAgB6C,SAC9BzC,IAAKwB,EAAS5B,gBAAgB8C,YAGhC,kBAAC,SAAD,CACEgF,MAAO,+CACPP,SAAU,CACRpH,IAAKyB,EAAS5B,gBAAgB6C,SAC9BzC,IAAKwB,EAAS5B,gBAAgB8C,aAGlC,kBAAC,WAAD,CACEiF,KAAMnG,EAAStB,gBACf0H,YAAY,UACZC,cAAe,GACfC,aAAc,S,6CCVTC,EAzB4C,SAAC,GAIrD,IAHLvI,EAGI,EAHJA,MACAwI,EAEI,EAFJA,KACAC,EACI,EADJA,aAEMC,EAASjG,kBAAO,GAGtBC,qBAAU,WACR,IAAKgG,EAAO/F,QAAS,CACnB,IAAMgG,EAAMC,aAAaC,QAAQL,GACjC,GAAIG,EAAK,CACP,IAAMG,EAAcC,KAAKC,MAAML,GAC/BF,EAAaK,GACbJ,EAAO/F,SAAU,OAMvBD,qBAAU,WACRkG,aAAaK,QAAQT,EAAMO,KAAKG,UAAUlJ,MACzC,CAACA,EAAOwI,K,kCCXPjE,EAAYC,aAAW,SAAAxD,GAAK,MAAK,CACrCmI,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAatI,EAAM2D,QAAQ,IAE7BuD,MAAO,CACLkB,SAAU,OAgDCG,EA5CO,WACpB,IAAM1E,EAAUN,IACVvC,EAAWN,IACXO,EAAWH,IASjB,OAPAyG,EAAuB,CACrBvI,MAAO0B,IACP8G,KAAM,OACNC,aAAc,SAACzI,GAAD,OACZiC,EAAS,CAAE/B,KAAM,QAASC,QAASH,OAIrC,yBAAKwG,UAAW3B,EAAQsE,MACtB,kBAACK,EAAA,EAAD,CAAQ7B,SAAS,SAASnB,UAAW3B,EAAQsE,MAC3C,kBAACM,EAAA,EAAD,CAASjD,UAAW3B,EAAQsE,MAC1B,kBAACO,EAAA,EAAD,CACEC,KAAK,QACLzC,MAAM,UACN0C,aAAW,OACXpD,UAAW3B,EAAQwE,WACnB/B,QAAS,kBACPrF,EAAS,CAAE/B,KAAM,aAAcC,SAAU6B,EAASjB,YAGpD,kBAAC,IAAD,OAEF,kBAAC8F,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAW3B,EAAQqD,OAA5C,sBAGA,kBAAC2B,EAAA,EAAD,CAAS3B,MAAM,wBACb,kBAAC4B,EAAA,EAAD,CAAMC,KAAK,wDACT,kBAACL,EAAA,EAAD,CAAYC,KAAK,OACf,kBAAC,IAAD,WAMV,kBAAC,EAAD,MACA,kBAAC,EAAD,QC3DcK,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBT8B+C,SAAC,GAEzB,IADvBC,EACsB,EADtBA,SACsB,EACOhJ,IAAMiJ,WAAWxK,EAAS,CACrDK,gBAAiB,GACjBC,gBAAgB,EAChBC,KAAM,EACNM,iBAAiB,EACjBC,YAAa,EACbH,gBAAiB,GACjBI,SAAU,EACVC,SAAS,IATW,mBACfiB,EADe,KACLC,EADK,KAWtB,OACE,kBAACuI,EAAA,EAAD,CAAexJ,MAAOA,GACpB,kBAACK,EAAgBoJ,SAAjB,CAA0BC,MAAO1I,GAC/B,kBAACP,EAAmBgJ,SAApB,CAA6BC,MAAOzI,GACjCqI,OS/CT,KACE,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDsHpB,kBAAmB7F,WACrBA,UAAU8F,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0f51114.chunk.js","sourcesContent":["import { AppState } from \"../context/context\";\r\n\r\ntype Action =\r\n  | { type: \"RESET\"; payload: AppState }\r\n  | { type: \"CURRENT_POSITION\"; payload: any }\r\n  | { type: \"USER_DENIAL\" }\r\n  | { type: \"MAP_POSITIONS\"; payload: any }\r\n  | { type: \"COUNTING_STARTED\"; payload: any }\r\n  | { type: \"COUNT\"; payload: number }\r\n  | { type: \"MAP_DISTANCE\"; payload: number }\r\n  | { type: \"RESET_BUTTON\" }\r\n  | { type: \"TOGGLE_TAB\"; payload: boolean };\r\n\r\nexport type Dispatch = (action: Action) => void;\r\n\r\nexport const reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return action.payload;\r\n    case \"CURRENT_POSITION\":\r\n      return {\r\n        ...state,\r\n        currentPosition: action.payload,\r\n        userPermission: true,\r\n        zoom: 14\r\n      };\r\n    case \"USER_DENIAL\":\r\n      return {\r\n        ...state,\r\n        currentPosition: { lat: 52.834357, lng: 18.688854 },\r\n        userPermission: false\r\n      };\r\n    case \"MAP_POSITIONS\":\r\n      const newMappedPositions = state.mappedPositions.concat(action.payload);\r\n      return { ...state, mappedPositions: newMappedPositions };\r\n    case \"COUNTING_STARTED\":\r\n      return { ...state, countingStarted: action.payload };\r\n    case \"COUNT\":\r\n      return { ...state, runningTime: action.payload };\r\n    case \"MAP_DISTANCE\":\r\n      return { ...state, distance: state.distance + action.payload };\r\n    case \"RESET_BUTTON\":\r\n      return {\r\n        ...state,\r\n        countingStarted: false,\r\n        runningTime: 0,\r\n        mappedPositions: [],\r\n        distance: 0\r\n      };\r\n    case \"TOGGLE_TAB\":\r\n      return {\r\n        ...state,\r\n        openTab: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { reducer } from \"../reducer/reducer\";\r\nimport { Dispatch } from \"../reducer/reducer\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nexport type AppProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport type AppState = {\r\n  currentPosition: Coords;\r\n  userPermission: boolean;\r\n  zoom: number;\r\n  countingStarted: boolean;\r\n  runningTime: number;\r\n  mappedPositions: Array<Coords>;\r\n  distance: number;\r\n  openTab: boolean;\r\n};\r\nexport type Coords = {\r\n  accuracy: number;\r\n  latitude: number;\r\n  longitude: number;\r\n  speed: number;\r\n};\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#6eb63c\"\r\n    }\r\n  }\r\n});\r\n\r\nconst AppStateContext = React.createContext<AppState | undefined>(undefined);\r\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\r\n\r\nconst AppProvider: React.SFC<AppProviderProps> = ({\r\n  children\r\n}: AppProviderProps) => {\r\n  const [AppState, dispatch] = React.useReducer(reducer, {\r\n    currentPosition: {},\r\n    userPermission: false,\r\n    zoom: 5,\r\n    countingStarted: false,\r\n    runningTime: 0,\r\n    mappedPositions: [],\r\n    distance: 0,\r\n    openTab: false\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AppStateContext.Provider value={AppState}>\r\n        <AppDispatchContext.Provider value={dispatch}>\r\n          {children}\r\n        </AppDispatchContext.Provider>\r\n      </AppStateContext.Provider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nconst useAppState = () => {\r\n  const context = React.useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useAppDispatch = () => {\r\n  const context = React.useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useDispatchState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { AppProvider, useAppState, useAppDispatch };\r\n","import { useAppState, useAppDispatch } from \"../../context/context\";\r\nimport { useInterval } from \"./setInterval\";\r\n\r\nexport function useLocationReadInterval() {\r\n    const AppState = useAppState();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const startTime = Date.now() - AppState.runningTime;\r\n    const onLocationRead = () => {\r\n        //Time counter\r\n        dispatch({ type: \"COUNT\", payload: Date.now() - startTime });\r\n        //Pushing new coords to positions array\r\n        const transformedPosition = {\r\n            lat: AppState.currentPosition.latitude,\r\n            lng: AppState.currentPosition.longitude\r\n        };\r\n        dispatch({ type: \"MAP_POSITIONS\", payload: transformedPosition });\r\n        //Continuously assigning last two coords from positions array to distance equation\r\n        if (AppState.mappedPositions.length > 1) {\r\n            const positionOne =\r\n                AppState.mappedPositions[AppState.mappedPositions.length - 2];\r\n            const positionTwo =\r\n                AppState.mappedPositions[AppState.mappedPositions.length - 1];\r\n            return distanceCounter(positionOne, positionTwo);\r\n        } else {\r\n            const positionOne = { lat: 0, lng: 0 };\r\n            const positionTwo = { lat: 0, lng: 0 };\r\n            return distanceCounter(positionOne, positionTwo);\r\n        }\r\n    };\r\n\r\n    useInterval(onLocationRead, 1000, AppState.countingStarted);\r\n\r\n    //Distance equation\r\n    const distanceCounter = (positionOne: any, positionTwo: any) => {\r\n        const lat1 = positionOne.lat;\r\n        const lon1 = positionOne.lng;\r\n        const lat2 = positionTwo.lat;\r\n        const lon2 = positionTwo.lng;\r\n        let R = 6371; // Radius of the earth in km\r\n        let dLat = deg2rad(lat2 - lat1);\r\n        let dLon = deg2rad(lon2 - lon1);\r\n        let a =\r\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos(deg2rad(lat1)) *\r\n            Math.cos(deg2rad(lat2)) *\r\n            Math.sin(dLon / 2) *\r\n            Math.sin(dLon / 2);\r\n        let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        let d = R * c; // Distance in km\r\n\r\n        function deg2rad(deg: number) {\r\n            return deg * (Math.PI / 180);\r\n        }\r\n\r\n        return dispatch({ type: \"MAP_DISTANCE\", payload: d });\r\n    };\r\n}","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(\r\n  callback: () => void,\r\n  delay: number,\r\n  active: boolean\r\n) {\r\n  const savedCallback = useRef(() => {});\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    if (active) {\r\n      const tick = () => {\r\n        savedCallback.current();\r\n      };\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }\r\n  }, [delay, active]);\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppState } from \"../../context/context\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  Typography,\r\n  ButtonGroup,\r\n  Drawer,\r\n  Grid,\r\n  makeStyles,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport PlayArrowRoundedIcon from \"@material-ui/icons/PlayArrowRounded\";\r\nimport PauseRoundedIcon from \"@material-ui/icons/PauseRounded\";\r\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\r\n\r\nimport { useLocationReadInterval } from \"./useLocationReadInterval\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  verticalPadding: {\r\n    padding: theme.spacing(1, 2)\r\n  }\r\n}));\r\n\r\nconst Menu: React.FC = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n  useLocationReadInterval();\r\n\r\n  useEffect(() => {\r\n    let watchId = 0;\r\n    if (navigator.geolocation) {\r\n      const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 2000,\r\n        maximumAge: 1000\r\n      };\r\n      const success = (pos: any) => {\r\n        const crd = pos.coords;\r\n        dispatch({ type: \"CURRENT_POSITION\", payload: crd });\r\n      };\r\n      const error = (err: any) => {\r\n        console.warn(`ERROR(${err.code}): ${err.message}`);\r\n        dispatch({ type: \"USER_DENIAL\" });\r\n      };\r\n      watchId = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\r\n        \"Something get wrong, geolocation is disabled, or your browser is not supporting it\"\r\n      );\r\n    }\r\n    return () => navigator.geolocation.clearWatch(watchId);\r\n  }, [dispatch]);\r\n\r\n  //Simple timer transformations\r\n  const timerValue = (\r\n    <div>\r\n      <span>{Math.floor((AppState.runningTime / 1000 / 60) << 0)}</span>:\r\n      <span>\r\n        {Math.floor((AppState.runningTime / 1000) % 60) < 10 && 0}\r\n        {Math.floor((AppState.runningTime / 1000) % 60)}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer\r\n      anchor=\"bottom\"\r\n      open={AppState.openTab}\r\n      onClose={() =>\r\n        dispatch({ type: \"TOGGLE_TAB\", payload: !AppState.openTab })\r\n      }\r\n    >\r\n      <Grid container justify=\"center\" className={classes.verticalPadding}>\r\n        <Grid item>\r\n          <Grid container direction=\"column\">\r\n            <Box textAlign=\"center\">\r\n              <Typography variant=\"h6\" component=\"h4\" className=\"alignCenter\">\r\n                {AppState.userPermission\r\n                  ? \"Your coordinates provided by geolocation:\"\r\n                  : \"User rejected location sharing. User location is needed for the proper functioning of the application.\"}\r\n              </Typography>\r\n            </Box>\r\n            <Grid item>\r\n              Accuracy: ~{Math.floor(AppState.currentPosition.accuracy)}m\r\n            </Grid>\r\n            <Grid item>\r\n              Current speed:\r\n              {AppState.currentPosition.speed\r\n                ? Math.floor((AppState.currentPosition.speed * 1000) / 60) +\r\n                  \"km/h\"\r\n                : \"-\"}\r\n            </Grid>\r\n            <Grid item>\r\n              Current distance: {Math.floor(AppState.distance * 1000)}m\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography\r\n                color=\"primary\"\r\n                variant=\"h5\"\r\n                component=\"h3\"\r\n                align=\"center\"\r\n              >\r\n                {timerValue}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container item justify=\"center\">\r\n              <ButtonGroup color=\"primary\" variant=\"contained\">\r\n                <Button\r\n                  onClick={() => {\r\n                    dispatch({\r\n                      type: \"COUNTING_STARTED\",\r\n                      payload: !AppState.countingStarted\r\n                    });\r\n                  }}\r\n                >\r\n                  {AppState.countingStarted ? (\r\n                    <PauseRoundedIcon />\r\n                  ) : (\r\n                    <PlayArrowRoundedIcon />\r\n                  )}\r\n                </Button>\r\n              </ButtonGroup>\r\n              {!AppState.countingStarted && (\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  onClick={() => dispatch({ type: \"RESET_BUTTON\" })}\r\n                >\r\n                  <StopRoundedIcon />\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import * as React from 'react';\r\n\r\n\r\nconst LoadingContainer = () => {\r\n    return ( <h1>Map is loading...</h1> );\r\n}\r\n \r\nexport default LoadingContainer;","import React from \"react\";\r\nimport { GoogleApiWrapper } from \"google-maps-react\";\r\nimport { Map, Polyline, Marker } from \"google-maps-react\";\r\nimport { useAppState } from \"../../context/context\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport LoadingContainer from \"./LoadingContainer\";\r\n\r\nconst AnyMap = Map as any;\r\n\r\n//@ts-ignore\r\nconst useStyles = makeStyles(theme => ({\r\n  fullScreen: {\r\n    position: \"relative\",\r\n    height: \"calc(100vh - 64px)\"\r\n  }\r\n}));\r\n\r\nconst MapContainer = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  \r\n  return (\r\n    <div className={classes.fullScreen}>\r\n      <AnyMap\r\n        //@ts-ignore\r\n        google={window.google}\r\n        zoom={14}\r\n        initialCenter={{\r\n          lat: AppState.currentPosition.latitude,\r\n          lng: AppState.currentPosition.longitude\r\n        }}\r\n      >\r\n        <Marker\r\n          title={\"The marker`s title will appear as a tooltip.\"}\r\n          position={{\r\n            lat: AppState.currentPosition.latitude,\r\n            lng: AppState.currentPosition.longitude\r\n          }}\r\n        />\r\n        <Polyline\r\n          path={AppState.mappedPositions}\r\n          strokeColor=\"#0000FF\"\r\n          strokeOpacity={0.8}\r\n          strokeWeight={3}\r\n        />\r\n      </AnyMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyCemKeklp6hKhbSOQk6YJpOhCwNKPeIVsc\",\r\n  LoadingContainer: LoadingContainer\r\n})(MapContainer);\r\n","import { useRef, useEffect } from \"react\";\r\n\r\ntype useStateInLocalStorageType = <T>(params: {\r\n  state: T;\r\n  name: string;\r\n  initializeFn: (state: T) => void;\r\n}) => void;\r\n\r\nconst useStateInLocalStorage: useStateInLocalStorageType = ({\r\n  state,\r\n  name,\r\n  initializeFn\r\n}) => {\r\n  const didRun = useRef(false);\r\n\r\n  // if app initializes, try to get data from local storage\r\n  useEffect(() => {\r\n    if (!didRun.current) {\r\n      const raw = localStorage.getItem(name);\r\n      if (raw) {\r\n        const loadedState = JSON.parse(raw);\r\n        initializeFn(loadedState);\r\n        didRun.current = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Save state to local storage after each change\r\n  useEffect(() => {\r\n    localStorage.setItem(name, JSON.stringify(state));\r\n  }, [state, name]);\r\n};\r\n\r\nexport default useStateInLocalStorage;\r\n","import React from \"react\";\r\n\r\nimport Menu from \"./components/menu/Menu\";\r\nimport MapContainer from \"./components/map/MapContainer\";\r\n\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  makeStyles,\r\n  Link,\r\n  Tooltip\r\n} from \"@material-ui/core\";\r\nimport { AppState, useAppState, useAppDispatch } from \"./context/context\";\r\nimport useStateInLocalStorage from \"./localStorage/localStorage\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useStateInLocalStorage({\r\n    state: useAppState(),\r\n    name: \"data\",\r\n    initializeFn: (state: AppState) =>\r\n      dispatch({ type: \"RESET\", payload: state })\r\n  });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.root}>\r\n        <Toolbar className={classes.root}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            className={classes.menuButton}\r\n            onClick={() =>\r\n              dispatch({ type: \"TOGGLE_TAB\", payload: !AppState.openTab })\r\n            }\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            endomondo-like app\r\n          </Typography>\r\n          <Tooltip title=\"Go to github page...\">\r\n            <Link href=\"https://github.com/DariuszSikorra/endomondo-like-app\">\r\n              <IconButton edge=\"end\">\r\n                <GitHubIcon />\r\n              </IconButton>\r\n            </Link>\r\n          </Tooltip>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <MapContainer />\r\n      <Menu />\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { AppProvider } from \"./context/context\";\r\n\r\nReactDOM.render(\r\n  <AppProvider>\r\n    <App />\r\n  </AppProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}