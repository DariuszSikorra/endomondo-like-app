{"version":3,"sources":["reducer/reducer.tsx","context/context.tsx","components/menu/Menu.tsx","components/menu/setInterval.tsx","components/map/MapContainer.tsx","localStorage/localStorage.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["reducer","state","action","type","payload","currentPosition","newMappedPositions","mappedPositions","concat","countingStarted","runningTime","distance","openTab","theme","createMuiTheme","palette","primary","main","AppStateContext","React","createContext","undefined","AppDispatchContext","useAppState","context","useContext","Error","useAppDispatch","useStyles","makeStyles","verticalPadding","padding","spacing","Menu","classes","AppState","dispatch","startTime","Date","now","callback","delay","active","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","transformedPosition","lat","latitude","lng","longitude","length","positionOne","positionTwo","distanceCounter","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","deg","PI","watchId","navigator","geolocation","watchPosition","pos","crd","coords","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","log","clearWatch","timerValue","floor","SwipeableDrawer","variant","anchor","open","onClose","onOpen","Grid","container","justify","className","item","direction","accuracy","speed","Typography","color","component","align","ButtonGroup","Button","onClick","AnyMap","Map","fullScreen","position","height","GoogleApiWrapper","apiKey","google","window","zoom","initialCenter","title","path","strokeColor","strokeOpacity","strokeWeight","useStateInLocalStorage","name","initializeFn","didRun","raw","localStorage","getItem","loadedState","JSON","parse","setItem","stringify","menuButton","marginRight","App","AppBar","Toolbar","IconButton","edge","aria-label","Boolean","location","hostname","match","ReactDOM","render","children","useReducer","ThemeProvider","Provider","value","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23aed38f.chunk.js","sourcesContent":["import { AppState } from \"../context/context\";\r\n\r\ntype Action =\r\n  | { type: \"RESET\"; payload: AppState }\r\n  | { type: \"CURRENT_POSITION\"; payload: any }\r\n  | { type: \"MAP_POSITIONS\"; payload: any }\r\n  | { type: \"COUNTING_STARTED\"; payload: any }\r\n  | { type: \"COUNT\"; payload: number }\r\n  | { type: \"MAP_DISTANCE\"; payload: number }\r\n  | { type: \"RESET_BUTTON\" }\r\n  | { type: \"TOGGLE_TAB\"; payload: boolean };\r\n\r\nexport type Dispatch = (action: Action) => void;\r\n\r\nexport const reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return action.payload;\r\n    case \"CURRENT_POSITION\":\r\n      return { ...state, currentPosition: action.payload };\r\n    case \"MAP_POSITIONS\":\r\n      const newMappedPositions = state.mappedPositions.concat(action.payload);\r\n      return { ...state, mappedPositions: newMappedPositions };\r\n    case \"COUNTING_STARTED\":\r\n      return { ...state, countingStarted: action.payload };\r\n    case \"COUNT\":\r\n      return { ...state, runningTime: action.payload };\r\n    case \"MAP_DISTANCE\":\r\n      return { ...state, distance: state.distance + action.payload };\r\n    case \"RESET_BUTTON\":\r\n      return {\r\n        ...state,\r\n        countingStarted: false,\r\n        runningTime: 0,\r\n        mappedPositions: [],\r\n        distance: 0\r\n      };\r\n    case \"TOGGLE_TAB\":\r\n      return {\r\n        ...state,\r\n        openTab: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { reducer } from \"../reducer/reducer\";\r\nimport { Dispatch } from \"../reducer/reducer\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nexport type AppProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport type AppState = {\r\n  currentPosition: Coords;\r\n  countingStarted: boolean;\r\n  runningTime: number;\r\n  mappedPositions: Array<Coords>;\r\n  distance: number;\r\n  openTab: boolean;\r\n};\r\nexport type Coords = {\r\n  accuracy: number;\r\n  latitude: number;\r\n  longitude: number;\r\n  speed: number;\r\n};\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#6eb63c\"\r\n    }\r\n  }\r\n});\r\n\r\nconst AppStateContext = React.createContext<AppState | undefined>(undefined);\r\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\r\n\r\nconst AppProvider: React.SFC<AppProviderProps> = ({\r\n  children\r\n}: AppProviderProps) => {\r\n  const [AppState, dispatch] = React.useReducer(reducer, {\r\n    currentPosition: {},\r\n    countingStarted: false,\r\n    runningTime: 0,\r\n    mappedPositions: [],\r\n    distance: 0,\r\n    openTab: false\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AppStateContext.Provider value={AppState}>\r\n        <AppDispatchContext.Provider value={dispatch}>\r\n          {children}\r\n        </AppDispatchContext.Provider>\r\n      </AppStateContext.Provider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nconst useAppState = () => {\r\n  const context = React.useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useAppDispatch = () => {\r\n  const context = React.useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useDispatchState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { AppProvider, useAppState, useAppDispatch };\r\n","import React, { useEffect } from \"react\";\r\nimport { useAppDispatch, useAppState } from \"../../context/context\";\r\nimport { useInterval } from \"./setInterval\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  Typography,\r\n  ButtonGroup,\r\n  SwipeableDrawer,\r\n  Grid,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  verticalPadding: {\r\n    padding: theme.spacing(1, 0)\r\n  }\r\n}));\r\n\r\nexport interface MenuProps {}\r\nconst Menu: React.SFC<MenuProps> = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const startTime = Date.now() - AppState.runningTime;\r\n\r\n  const onLocationRead = () => {\r\n    //Time counter\r\n    dispatch({ type: \"COUNT\", payload: Date.now() - startTime });\r\n    //Pushing new coords to positions array\r\n    const transformedPosition = {\r\n      lat: AppState.currentPosition.latitude,\r\n      lng: AppState.currentPosition.longitude\r\n    };\r\n    dispatch({ type: \"MAP_POSITIONS\", payload: transformedPosition });\r\n    //Continuously assigning last two coords from positions array to distance equation\r\n    if (AppState.mappedPositions.length > 1) {\r\n      const positionOne =\r\n        AppState.mappedPositions[AppState.mappedPositions.length - 2];\r\n      const positionTwo =\r\n        AppState.mappedPositions[AppState.mappedPositions.length - 1];\r\n      return distanceCounter(positionOne, positionTwo);\r\n    } else {\r\n      const positionOne = { lat: 0, lng: 0 };\r\n      const positionTwo = { lat: 0, lng: 0 };\r\n      return distanceCounter(positionOne, positionTwo);\r\n    }\r\n  };\r\n  useInterval(onLocationRead, 1000, AppState.countingStarted);\r\n\r\n  //Distance equation\r\n  const distanceCounter = (positionOne: any, positionTwo: any) => {\r\n    const lat1 = positionOne.lat;\r\n    const lon1 = positionOne.lng;\r\n    const lat2 = positionTwo.lat;\r\n    const lon2 = positionTwo.lng;\r\n    let R = 6371; // Radius of the earth in km\r\n    let dLat = deg2rad(lat2 - lat1);\r\n    let dLon = deg2rad(lon2 - lon1);\r\n    let a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(deg2rad(lat1)) *\r\n        Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c; // Distance in km\r\n\r\n    function deg2rad(deg: number) {\r\n      return deg * (Math.PI / 180);\r\n    }\r\n\r\n    return dispatch({ type: \"MAP_DISTANCE\", payload: d });\r\n  };\r\n\r\n  //Watching for changing position.\r\n  useEffect(() => {\r\n    let watchId = 0;\r\n    if (navigator.geolocation) {\r\n      const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 2000,\r\n        maximumAge: 1000\r\n      };\r\n      const success = (pos: any) => {\r\n        const crd = pos.coords;\r\n        dispatch({ type: \"CURRENT_POSITION\", payload: crd });\r\n      };\r\n      const error = (err: any) => {\r\n        console.warn(`ERROR(${err.code}): ${err.message}`);\r\n      };\r\n      watchId = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\r\n        \"Something get wrong, geolocation is disabled, or your browser is not supporting it\"\r\n      );\r\n    }\r\n    return () => navigator.geolocation.clearWatch(watchId);\r\n  }, [dispatch]);\r\n\r\n  //Toggle time counter button\r\n  const handleToggle = () => {\r\n    dispatch({ type: \"COUNTING_STARTED\", payload: !AppState.countingStarted });\r\n  };\r\n\r\n  //Simple timer transformations\r\n  const timerValue = (\r\n    <div>\r\n      <span>{Math.floor((AppState.runningTime / 1000 / 60) << 0)}</span>:\r\n      <span>\r\n        {Math.floor((AppState.runningTime / 1000) % 60) < 10 && 0}\r\n        {Math.floor((AppState.runningTime / 1000) % 60)}\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <SwipeableDrawer\r\n      variant=\"persistent\"\r\n      anchor=\"bottom\"\r\n      open={AppState.openTab}\r\n      onClose={() =>\r\n        dispatch({ type: \"TOGGLE_TAB\", payload: !AppState.openTab })\r\n      }\r\n      onOpen={() =>\r\n        dispatch({ type: \"TOGGLE_TAB\", payload: !AppState.openTab })\r\n      }\r\n    >\r\n      <Grid container justify=\"center\" className={classes.verticalPadding}>\r\n        <Grid item>\r\n          <Grid container direction=\"column\">\r\n            <Grid item>\r\n              Accuracy: ~{Math.floor(AppState.currentPosition.accuracy)}m\r\n            </Grid>\r\n            <Grid item>\r\n              Current speed:{\" \"}\r\n              {AppState.currentPosition.speed\r\n                ? Math.floor((AppState.currentPosition.speed * 1000) / 60) +\r\n                  \"km/h\"\r\n                : \"-\"}\r\n            </Grid>\r\n            <Grid item>\r\n              Current distance: {Math.floor(AppState.distance * 1000)}m\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography\r\n                color=\"primary\"\r\n                variant=\"h5\"\r\n                component=\"h3\"\r\n                align=\"center\"\r\n              >\r\n                {timerValue}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container item justify=\"center\">\r\n              <ButtonGroup color=\"primary\" variant=\"contained\">\r\n                <Button onClick={handleToggle}>\r\n                  {AppState.countingStarted ? \"Pause\" : \"Start\"}\r\n                </Button>\r\n                {!AppState.countingStarted && (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={() => dispatch({ type: \"RESET_BUTTON\" })}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                )}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </SwipeableDrawer>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(\r\n  callback: () => void,\r\n  delay: number,\r\n  active: boolean\r\n) {\r\n  const savedCallback = useRef(() => {});\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    if (active) {\r\n      const tick = () => {\r\n        savedCallback.current();\r\n      };\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }\r\n  }, [delay, active]);\r\n}\r\n","import React from \"react\";\r\nimport { GoogleApiWrapper } from \"google-maps-react\";\r\nimport { Map, Polyline, Marker } from \"google-maps-react\";\r\nimport { useAppState } from \"../../context/context\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst AnyMap = Map as any;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  fullScreen: {\r\n    position: \"relative\",\r\n    height: \"calc(100vh - 64px)\"\r\n  }\r\n}));\r\n\r\nconst MapContainer = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  return (\r\n    <div className={classes.fullScreen}>\r\n      <AnyMap\r\n        google={window.google}\r\n        zoom={14}\r\n        initialCenter={{\r\n          lat: AppState.currentPosition.latitude,\r\n          lng: AppState.currentPosition.longitude\r\n        }}\r\n      >\r\n        <Marker\r\n          title={\"The marker`s title will appear as a tooltip.\"}\r\n          position={{\r\n            lat: AppState.currentPosition.latitude,\r\n            lng: AppState.currentPosition.longitude\r\n          }}\r\n        />\r\n        <Polyline\r\n          path={AppState.mappedPositions}\r\n          strokeColor=\"#0000FF\"\r\n          strokeOpacity={0.8}\r\n          strokeWeight={3}\r\n        />\r\n      </AnyMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyCemKeklp6hKhbSOQk6YJpOhCwNKPeIVsc\"\r\n})(MapContainer);\r\n","import { useRef, useEffect } from \"react\";\r\n\r\ntype useStateInLocalStorageType = <T>(params: {\r\n  state: T;\r\n  name: string;\r\n  initializeFn: (state: T) => void;\r\n}) => void;\r\n\r\nconst useStateInLocalStorage: useStateInLocalStorageType = ({\r\n  state,\r\n  name,\r\n  initializeFn\r\n}) => {\r\n  const didRun = useRef(false);\r\n\r\n  // if app initializes, try to get data from local storage\r\n  useEffect(() => {\r\n    if (!didRun.current) {\r\n      const raw = localStorage.getItem(name);\r\n      if (raw) {\r\n        const loadedState = JSON.parse(raw);\r\n        initializeFn(loadedState);\r\n        didRun.current = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Save state to local storage after each change\r\n  useEffect(() => {\r\n    localStorage.setItem(name, JSON.stringify(state));\r\n  }, [state, name]);\r\n};\r\n\r\nexport default useStateInLocalStorage;\r\n","import React from \"react\";\r\n\r\nimport Menu from \"./components/menu/Menu\";\r\nimport MapContainer from \"./components/map/MapContainer\";\r\n\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport { AppState, useAppState, useAppDispatch } from \"./context/context\";\r\nimport useStateInLocalStorage from \"./localStorage/localStorage\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useStateInLocalStorage({\r\n    state: useAppState(),\r\n    name: \"data\",\r\n    initializeFn: (state: AppState) =>\r\n      dispatch({ type: \"RESET\", payload: state })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            className={classes.menuButton}\r\n            onClick={() =>\r\n              dispatch({ type: \"TOGGLE_TAB\", payload: !AppState.openTab })\r\n            }\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">endomondo-like app</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <MapContainer />\r\n      <Menu />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { AppProvider } from \"./context/context\";\r\n\r\nReactDOM.render(\r\n  <AppProvider>\r\n    <App />\r\n  </AppProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}